/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Packages
 #	author : miyako
 #	2015/05/28
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void PluginMain(PA_long32 selector, PA_PluginParameters params)
{
	try
	{
		PA_long32 pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;

		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{

	}
}

void CommandDispatcher (PA_long32 pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
// --- PATH

		case 1 :
			PATH_SET_PACKAGE_BIT(pResult, pParams);
			break;

		case 2 :
			PATH_Get_package_bit(pResult, pParams);
			break;

		case 3 :
			PATH_Is_package(pResult, pParams);
			break;

		case 4 :
			PATH_SET_EXTENSION_HIDDEN(pResult, pParams);
			break;

		case 5 :
			PATH_Is_extension_hidden(pResult, pParams);
			break;

		case 6 :
			PATH_Get_localized_name(pResult, pParams);
			break;

		case 7 :
			PATH_SET_HIDDEN(pResult, pParams);
			break;

		case 8 :
			PATH_Is_hidden(pResult, pParams);
			break;

		case 9 :
			PATH_SET_ICON(pResult, pParams);
			break;

		case 10 :
			PATH_Get_icon(pResult, pParams);
			break;

		case 11 :
			PATH_Get_display_name(pResult, pParams);
			break;

	}
}

// ------------------------------------- PATH -------------------------------------

//Read-only 10_6 and 10_7, read-write 10_8

void PATH_SET_PACKAGE_BIT(sLONG_PTR *pResult, PackagePtr pParams)
{
    if(NSFoundationVersionNumber >= NSFoundationVersionNumber10_8){
    
        C_TEXT Param1;
        C_LONGINT Param2;

        Param1.fromParamAtIndex(pParams, 1);
        Param2.fromParamAtIndex(pParams, 2);

        NSURL *url = Param1.copyUrl();
        
        if(url){
            [url setResourceValue:[NSNumber numberWithInt:Param2.getIntValue()] 
            forKey:NSURLIsPackageKey error:NULL];
          
        }
        
        [url release];
    } 

}

void PATH_Get_package_bit(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	NSURL *url = Param1.copyUrl();
    
    if(url){
        NSNumber *value;
        if([url getResourceValue:&value forKey:NSURLIsPackageKey error:NULL]){
            returnValue.setIntValue([value boolValue]);
        }
        [url release];
    }
    
	returnValue.setReturn(pResult);
}

void PATH_Is_package(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	NSString *path = Param1.copyPath();

    if(path){
        returnValue.setIntValue([[NSWorkspace sharedWorkspace]isFilePackageAtPath:path]);
        [path release];
    }

	returnValue.setReturn(pResult);
}

void PATH_SET_EXTENSION_HIDDEN(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	NSURL *url = Param1.copyUrl();
    
    if(url){
        [url setResourceValue:[NSNumber numberWithInt:Param2.getIntValue()] 
        forKey:NSURLHasHiddenExtensionKey error:NULL];
        [url release];
    } 

}

void PATH_Is_extension_hidden(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	NSURL *url = Param1.copyUrl();
    
    if(url){
        NSNumber *value;
        if([url getResourceValue:&value forKey:NSURLHasHiddenExtensionKey error:NULL]){
            returnValue.setIntValue([value boolValue]);
        }
        [url release];
    }

	returnValue.setReturn(pResult);
}

void PATH_Get_localized_name(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	NSURL *url = Param1.copyUrl();
    
    if(url){
        NSString *value;
        if([url getResourceValue:&value forKey:NSURLLocalizedNameKey error:NULL]){
            returnValue.setUTF16String(value);
        }
        [url release];
    }

	returnValue.setReturn(pResult);
}

void PATH_SET_HIDDEN(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

	NSURL *url = Param1.copyUrl();
    
    if(url){
        [url setResourceValue:[NSNumber numberWithInt:Param2.getIntValue()] 
        forKey:NSURLIsHiddenKey error:NULL];
        [url release];
    } 

}

void PATH_Is_hidden(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_LONGINT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	NSURL *url = Param1.copyUrl();
    
    if(url){
        NSNumber *value;
        if([url getResourceValue:&value forKey:NSURLIsHiddenKey error:NULL]){
            returnValue.setIntValue([value boolValue]);
        }
        [url release];
    }

	returnValue.setReturn(pResult);
}

void PATH_SET_ICON(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_PICTURE Param2;

	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);

    NSString* fullPath = Param1.copyPath();
    
    if(fullPath){
    
        NSImage *iconImage = Param2.copyImage();
    
        if(iconImage){
            [[NSWorkspace sharedWorkspace]setIcon:iconImage forFile:fullPath options:0];
            [iconImage release];        
        }        
    
        [fullPath release];
    }

}

void PATH_Get_icon(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;

	Param1.fromParamAtIndex(pParams, 1);

	NSString* fullPath = Param1.copyPath();	
    
    if(fullPath){
        NSImage *icon = [[NSWorkspace sharedWorkspace]iconForFile:fullPath];
        if(icon){
            //return picture without memory leak; avoid the use of - TIFFRepresentation
            NSRect imageRect = NSMakeRect(0, 0, DEFAULT_ICON_SIZE , DEFAULT_ICON_SIZE);
            CGImageRef image = [icon CGImageForProposedRect:(NSRect *)&imageRect context:NULL hints:NULL];
            CFMutableDataRef data = CFDataCreateMutable(kCFAllocatorDefault, 0);
            CGImageDestinationRef destination = CGImageDestinationCreateWithData(data, kUTTypeTIFF, 1, NULL);
            CFMutableDictionaryRef properties = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, NULL, NULL);
            CGImageDestinationAddImage(destination, image, properties);
            CGImageDestinationFinalize(destination);
            PA_Picture picture = PA_CreatePicture((void *)CFDataGetBytePtr(data), CFDataGetLength(data));
            *(PA_Picture*) pResult = picture;
            CFRelease(destination);
            CFRelease(properties);
            CFRelease(data);
        }
        [fullPath release];
    }
}

void PATH_Get_display_name(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT returnValue;

	Param1.fromParamAtIndex(pParams, 1);

	NSString *fullPath = Param1.copyPath();
    
    if(fullPath){
    
        NSFileManager *defaultManager = [[NSFileManager alloc]init];	
        returnValue.setUTF16String([defaultManager displayNameAtPath:fullPath]);
        [defaultManager release];
        [fullPath release];
        
    }

	returnValue.setReturn(pResult);
}

